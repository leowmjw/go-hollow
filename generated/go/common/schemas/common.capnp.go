// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Timestamp capnp.Struct

// Timestamp_TypeID is the unique identifier for the type Timestamp.
const Timestamp_TypeID = 0xeca1c396fde49c81

func NewTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Timestamp(st), err
}

func NewRootTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Timestamp(st), err
}

func ReadRootTimestamp(msg *capnp.Message) (Timestamp, error) {
	root, err := msg.Root()
	return Timestamp(root.Struct()), err
}

func (s Timestamp) String() string {
	str, _ := text.Marshal(0xeca1c396fde49c81, capnp.Struct(s))
	return str
}

func (s Timestamp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Timestamp) DecodeFromPtr(p capnp.Ptr) Timestamp {
	return Timestamp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Timestamp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Timestamp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Timestamp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Timestamp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Timestamp) UnixSeconds() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Timestamp) SetUnixSeconds(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Timestamp) Nanos() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s Timestamp) SetNanos(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// Timestamp_List is a list of Timestamp.
type Timestamp_List = capnp.StructList[Timestamp]

// NewTimestamp creates a new list of Timestamp.
func NewTimestamp_List(s *capnp.Segment, sz int32) (Timestamp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Timestamp](l), err
}

// Timestamp_Future is a wrapper for a Timestamp promised by a client call.
type Timestamp_Future struct{ *capnp.Future }

func (f Timestamp_Future) Struct() (Timestamp, error) {
	p, err := f.Future.Ptr()
	return Timestamp(p.Struct()), err
}

type Status uint16

// Status_TypeID is the unique identifier for the type Status.
const Status_TypeID = 0xf5d0328147fab5f9

// Values of Status.
const (
	Status_active   Status = 0
	Status_inactive Status = 1
	Status_pending  Status = 2
	Status_deleted  Status = 3
)

// String returns the enum's constant name.
func (c Status) String() string {
	switch c {
	case Status_active:
		return "active"
	case Status_inactive:
		return "inactive"
	case Status_pending:
		return "pending"
	case Status_deleted:
		return "deleted"

	default:
		return ""
	}
}

// StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StatusFromString(c string) Status {
	switch c {
	case "active":
		return Status_active
	case "inactive":
		return Status_inactive
	case "pending":
		return Status_pending
	case "deleted":
		return Status_deleted

	default:
		return 0
	}
}

type Status_List = capnp.EnumList[Status]

func NewStatus_List(s *capnp.Segment, sz int32) (Status_List, error) {
	return capnp.NewEnumList[Status](s, sz)
}

type QualityScore capnp.Struct

// QualityScore_TypeID is the unique identifier for the type QualityScore.
const QualityScore_TypeID = 0xe17d0362f6e761a3

func NewQualityScore(s *capnp.Segment) (QualityScore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QualityScore(st), err
}

func NewRootQualityScore(s *capnp.Segment) (QualityScore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QualityScore(st), err
}

func ReadRootQualityScore(msg *capnp.Message) (QualityScore, error) {
	root, err := msg.Root()
	return QualityScore(root.Struct()), err
}

func (s QualityScore) String() string {
	str, _ := text.Marshal(0xe17d0362f6e761a3, capnp.Struct(s))
	return str
}

func (s QualityScore) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QualityScore) DecodeFromPtr(p capnp.Ptr) QualityScore {
	return QualityScore(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QualityScore) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QualityScore) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QualityScore) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QualityScore) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QualityScore) Value() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s QualityScore) SetValue(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

// QualityScore_List is a list of QualityScore.
type QualityScore_List = capnp.StructList[QualityScore]

// NewQualityScore creates a new list of QualityScore.
func NewQualityScore_List(s *capnp.Segment, sz int32) (QualityScore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[QualityScore](l), err
}

// QualityScore_Future is a wrapper for a QualityScore promised by a client call.
type QualityScore_Future struct{ *capnp.Future }

func (f QualityScore_Future) Struct() (QualityScore, error) {
	p, err := f.Future.Ptr()
	return QualityScore(p.Struct()), err
}

type Location capnp.Struct

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0xb1c3a101875e6a46

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0xb1c3a101875e6a46, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Latitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Location) SetLatitude(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Location) Longitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Location) SetLongitude(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Location) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location) SetAddress(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}

type Money capnp.Struct

// Money_TypeID is the unique identifier for the type Money.
const Money_TypeID = 0x88785e46eabc3c07

func NewMoney(s *capnp.Segment) (Money, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Money(st), err
}

func NewRootMoney(s *capnp.Segment) (Money, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Money(st), err
}

func ReadRootMoney(msg *capnp.Message) (Money, error) {
	root, err := msg.Root()
	return Money(root.Struct()), err
}

func (s Money) String() string {
	str, _ := text.Marshal(0x88785e46eabc3c07, capnp.Struct(s))
	return str
}

func (s Money) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Money) DecodeFromPtr(p capnp.Ptr) Money {
	return Money(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Money) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Money) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Money) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Money) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Money) AmountCents() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Money) SetAmountCents(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Money) Currency() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Money) HasCurrency() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Money) CurrencyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Money) SetCurrency(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Money_List is a list of Money.
type Money_List = capnp.StructList[Money]

// NewMoney creates a new list of Money.
func NewMoney_List(s *capnp.Segment, sz int32) (Money_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Money](l), err
}

// Money_Future is a wrapper for a Money promised by a client call.
type Money_Future struct{ *capnp.Future }

func (f Money_Future) Struct() (Money, error) {
	p, err := f.Future.Ptr()
	return Money(p.Struct()), err
}

const schema_d1a2b3c4e5f60718 = "x\xdat\x90OK\x15Q\x18\xc6\x9f\xe7\x9c\xabsE" +
	"\x85\xa6\xd1h#\x97\xa0 \xa1?j-B\x04\xc3\xca" +
	"@\x14<Y\xd0\"\x84\xe3\xcc\xc1&\xee=s\xb93" +
	"c\xba\x10qU}\x80\x82\xa0\x8d\xf5\x01\"\xc2]-" +
	"\xc2>@m\xdb\x19E\x14\xb5\x09\x12\x12b\xe2\xdcP" +
	"\xea\xc6\xdd\xbd\xbc\xfcx\x7f\xcf\xfb\x0c\x1d\xe2\xf9\xd2p" +
	"oEB\xa8\xa3\x1d\x9d\x857\xf6\xe2\xcb\xe4\xfc\xf2]" +
	"\xa8~\xb28\xec\xed||\xfd\xfc\xf1[t\xd0\x03\x82" +
	"\x9c\xef\x82\xf5\xe6\xb4\xca\xdb`1yk\xfe\x0e7\xb6" +
	"\x9e9X\xb4\xc2\xdb\xfc\x1e|kN\x9f\xf9\x14,\x9e" +
	"\xe8O;\x0bru\xbb\xe5r\xc9\x03\xce\xdc\x13\x07\x19" +
	"<\x14\x0e\xbe/\xc6\xc1b\xfd\xd1\x87_\x0f\xb66\xbe" +
	"\xb6\\vp\xb0)v\x83WM\xf6\xa5p)~n" +
	"\xee^^\x1fy\xf3\x03~\xff_(\x18\x0c\xc8\xf7\xc1" +
	"\xa0t\xe01\xb9\x88\x93E\x1a\xde45\x9d\x9e\x16a" +
	"R\xab%\xf6T\xa8\xeb\xb6>:\x93XiVfI" +
	"U\x96%\xa0D\xc0\x1f\\\x00\xd4qIuV\x90\xec" +
	"\xa3\xdb\x0dO\x01jHR\x8d\x09\x16\xba\x96\xe46\xbb" +
	"`\xe0\xd9,e\x17\x04\xbb\xc0\"\xcc\x1b\x0dc\xc3\x15" +
	"\x00\xec\x81`\x0f\xd8F:\x9d\x84\x15\x9d\xc5\x89u\xde" +
	"\x9e}\xef%\xe7\xb8(\xa9f\x05\xfd=\xf1\xcc\x15@" +
	"MK\xaa\xeb\x82\x14}\x14\x80\x7fm\x02P\xb3\x92\xea" +
	"\x86`Q\xd5Y\x9c\xe5\x91q\xdan\x08v\x83E5" +
	"\xb1\x8bn\x09\x9a\xbd\xdd\x9a\x8e\xa2\x86I\xd3\xff\xa2\xc9" +
	"\x7f\xa2\xa9\\W\xe3le.L\x1a4.^i?" +
	"^\xef\x08\xa0\xca\x92\xaaO\xb0\xb2\xa4\xab\xb9a'\x04" +
	";\xdb\xbey5\xae\x8d\x9b4\xd3\xb5z\xfb~}\xf7" +
	"S\xb3`w\xfd\x84\xa4:'X\xe46^\x9e3a" +
	"\x02\xcfF\xfb\x05W\xac\xb6I\xca2\x04\xcbm\x9ds" +
	"\x99\xf6\xb2<u\xc2\x03\xcd\xae\x06G\x01\xd2?2\x05" +
	"P\xf8\x03\x13\x00\xa5\xdf?\x01\x8c\xeb0\x8b\x97L\x11" +
	"\xdb?\x03\x80\xb5\xba\xb1Ql\x17\xd7\"S5\x99\x89" +
	"~\x07\x00\x00\xff\xff\xda\xdb\xcd\xc0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d1a2b3c4e5f60718,
		Nodes: []uint64{
			0x88785e46eabc3c07,
			0xb1c3a101875e6a46,
			0xe17d0362f6e761a3,
			0xeca1c396fde49c81,
			0xf5d0328147fab5f9,
		},
		Compressed: true,
	})
}
