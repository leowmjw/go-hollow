// Code generated by capnpc-go. DO NOT EDIT.

package delta

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type DeltaOperation uint16

// DeltaOperation_TypeID is the unique identifier for the type DeltaOperation.
const DeltaOperation_TypeID = 0xdac0af2fd7377b92

// Values of DeltaOperation.
const (
	DeltaOperation_add    DeltaOperation = 0
	DeltaOperation_update DeltaOperation = 1
	DeltaOperation_delete DeltaOperation = 2
)

// String returns the enum's constant name.
func (c DeltaOperation) String() string {
	switch c {
	case DeltaOperation_add:
		return "add"
	case DeltaOperation_update:
		return "update"
	case DeltaOperation_delete:
		return "delete"

	default:
		return ""
	}
}

// DeltaOperationFromString returns the enum value with a name,
// or the zero value if there's no such value.
func DeltaOperationFromString(c string) DeltaOperation {
	switch c {
	case "add":
		return DeltaOperation_add
	case "update":
		return DeltaOperation_update
	case "delete":
		return DeltaOperation_delete

	default:
		return 0
	}
}

type DeltaOperation_List = capnp.EnumList[DeltaOperation]

func NewDeltaOperation_List(s *capnp.Segment, sz int32) (DeltaOperation_List, error) {
	return capnp.NewEnumList[DeltaOperation](s, sz)
}

type DeltaRecord capnp.Struct

// DeltaRecord_TypeID is the unique identifier for the type DeltaRecord.
const DeltaRecord_TypeID = 0xec7523436ca92609

func NewDeltaRecord(s *capnp.Segment) (DeltaRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DeltaRecord(st), err
}

func NewRootDeltaRecord(s *capnp.Segment) (DeltaRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DeltaRecord(st), err
}

func ReadRootDeltaRecord(msg *capnp.Message) (DeltaRecord, error) {
	root, err := msg.Root()
	return DeltaRecord(root.Struct()), err
}

func (s DeltaRecord) String() string {
	str, _ := text.Marshal(0xec7523436ca92609, capnp.Struct(s))
	return str
}

func (s DeltaRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeltaRecord) DecodeFromPtr(p capnp.Ptr) DeltaRecord {
	return DeltaRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeltaRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeltaRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeltaRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeltaRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeltaRecord) Operation() DeltaOperation {
	return DeltaOperation(capnp.Struct(s).Uint16(0))
}

func (s DeltaRecord) SetOperation(v DeltaOperation) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s DeltaRecord) Ordinal() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s DeltaRecord) SetOrdinal(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s DeltaRecord) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s DeltaRecord) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeltaRecord) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// DeltaRecord_List is a list of DeltaRecord.
type DeltaRecord_List = capnp.StructList[DeltaRecord]

// NewDeltaRecord creates a new list of DeltaRecord.
func NewDeltaRecord_List(s *capnp.Segment, sz int32) (DeltaRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DeltaRecord](l), err
}

// DeltaRecord_Future is a wrapper for a DeltaRecord promised by a client call.
type DeltaRecord_Future struct{ *capnp.Future }

func (f DeltaRecord_Future) Struct() (DeltaRecord, error) {
	p, err := f.Future.Ptr()
	return DeltaRecord(p.Struct()), err
}

type TypeDelta capnp.Struct

// TypeDelta_TypeID is the unique identifier for the type TypeDelta.
const TypeDelta_TypeID = 0xbabb1d01a273c574

func NewTypeDelta(s *capnp.Segment) (TypeDelta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TypeDelta(st), err
}

func NewRootTypeDelta(s *capnp.Segment) (TypeDelta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TypeDelta(st), err
}

func ReadRootTypeDelta(msg *capnp.Message) (TypeDelta, error) {
	root, err := msg.Root()
	return TypeDelta(root.Struct()), err
}

func (s TypeDelta) String() string {
	str, _ := text.Marshal(0xbabb1d01a273c574, capnp.Struct(s))
	return str
}

func (s TypeDelta) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TypeDelta) DecodeFromPtr(p capnp.Ptr) TypeDelta {
	return TypeDelta(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TypeDelta) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TypeDelta) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TypeDelta) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TypeDelta) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TypeDelta) TypeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TypeDelta) HasTypeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TypeDelta) TypeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TypeDelta) SetTypeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TypeDelta) Records() (DeltaRecord_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return DeltaRecord_List(p.List()), err
}

func (s TypeDelta) HasRecords() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TypeDelta) SetRecords(v DeltaRecord_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated DeltaRecord_List, preferring placement in s's segment.
func (s TypeDelta) NewRecords(n int32) (DeltaRecord_List, error) {
	l, err := NewDeltaRecord_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DeltaRecord_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// TypeDelta_List is a list of TypeDelta.
type TypeDelta_List = capnp.StructList[TypeDelta]

// NewTypeDelta creates a new list of TypeDelta.
func NewTypeDelta_List(s *capnp.Segment, sz int32) (TypeDelta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TypeDelta](l), err
}

// TypeDelta_Future is a wrapper for a TypeDelta promised by a client call.
type TypeDelta_Future struct{ *capnp.Future }

func (f TypeDelta_Future) Struct() (TypeDelta, error) {
	p, err := f.Future.Ptr()
	return TypeDelta(p.Struct()), err
}

type DeltaSet capnp.Struct

// DeltaSet_TypeID is the unique identifier for the type DeltaSet.
const DeltaSet_TypeID = 0xedda5bf1d05c1fbd

func NewDeltaSet(s *capnp.Segment) (DeltaSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DeltaSet(st), err
}

func NewRootDeltaSet(s *capnp.Segment) (DeltaSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DeltaSet(st), err
}

func ReadRootDeltaSet(msg *capnp.Message) (DeltaSet, error) {
	root, err := msg.Root()
	return DeltaSet(root.Struct()), err
}

func (s DeltaSet) String() string {
	str, _ := text.Marshal(0xedda5bf1d05c1fbd, capnp.Struct(s))
	return str
}

func (s DeltaSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeltaSet) DecodeFromPtr(p capnp.Ptr) DeltaSet {
	return DeltaSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeltaSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeltaSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeltaSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeltaSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeltaSet) Version() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s DeltaSet) SetVersion(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s DeltaSet) FromVersion() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s DeltaSet) SetFromVersion(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s DeltaSet) Deltas() (TypeDelta_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TypeDelta_List(p.List()), err
}

func (s DeltaSet) HasDeltas() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeltaSet) SetDeltas(v TypeDelta_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDeltas sets the deltas field to a newly
// allocated TypeDelta_List, preferring placement in s's segment.
func (s DeltaSet) NewDeltas(n int32) (TypeDelta_List, error) {
	l, err := NewTypeDelta_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TypeDelta_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s DeltaSet) Optimized() bool {
	return capnp.Struct(s).Bit(128)
}

func (s DeltaSet) SetOptimized(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s DeltaSet) ChangeCount() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s DeltaSet) SetChangeCount(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

// DeltaSet_List is a list of DeltaSet.
type DeltaSet_List = capnp.StructList[DeltaSet]

// NewDeltaSet creates a new list of DeltaSet.
func NewDeltaSet_List(s *capnp.Segment, sz int32) (DeltaSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[DeltaSet](l), err
}

// DeltaSet_Future is a wrapper for a DeltaSet promised by a client call.
type DeltaSet_Future struct{ *capnp.Future }

func (f DeltaSet_Future) Struct() (DeltaSet, error) {
	p, err := f.Future.Ptr()
	return DeltaSet(p.Struct()), err
}

type DeltaMetadata capnp.Struct

// DeltaMetadata_TypeID is the unique identifier for the type DeltaMetadata.
const DeltaMetadata_TypeID = 0xcab2f2c6e1d68ffb

func NewDeltaMetadata(s *capnp.Segment) (DeltaMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DeltaMetadata(st), err
}

func NewRootDeltaMetadata(s *capnp.Segment) (DeltaMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DeltaMetadata(st), err
}

func ReadRootDeltaMetadata(msg *capnp.Message) (DeltaMetadata, error) {
	root, err := msg.Root()
	return DeltaMetadata(root.Struct()), err
}

func (s DeltaMetadata) String() string {
	str, _ := text.Marshal(0xcab2f2c6e1d68ffb, capnp.Struct(s))
	return str
}

func (s DeltaMetadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeltaMetadata) DecodeFromPtr(p capnp.Ptr) DeltaMetadata {
	return DeltaMetadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeltaMetadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeltaMetadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeltaMetadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeltaMetadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeltaMetadata) DeltaSet() (DeltaSet, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DeltaSet(p.Struct()), err
}

func (s DeltaMetadata) HasDeltaSet() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeltaMetadata) SetDeltaSet(v DeltaSet) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDeltaSet sets the deltaSet field to a newly
// allocated DeltaSet struct, preferring placement in s's segment.
func (s DeltaMetadata) NewDeltaSet() (DeltaSet, error) {
	ss, err := NewDeltaSet(capnp.Struct(s).Segment())
	if err != nil {
		return DeltaSet{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DeltaMetadata) CompressionRatio() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DeltaMetadata) SetCompressionRatio(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s DeltaMetadata) SerializedSize() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s DeltaMetadata) SetSerializedSize(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s DeltaMetadata) ChangeEfficiency() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DeltaMetadata) SetChangeEfficiency(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// DeltaMetadata_List is a list of DeltaMetadata.
type DeltaMetadata_List = capnp.StructList[DeltaMetadata]

// NewDeltaMetadata creates a new list of DeltaMetadata.
func NewDeltaMetadata_List(s *capnp.Segment, sz int32) (DeltaMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[DeltaMetadata](l), err
}

// DeltaMetadata_Future is a wrapper for a DeltaMetadata promised by a client call.
type DeltaMetadata_Future struct{ *capnp.Future }

func (f DeltaMetadata_Future) Struct() (DeltaMetadata, error) {
	p, err := f.Future.Ptr()
	return DeltaMetadata(p.Struct()), err
}
func (p DeltaMetadata_Future) DeltaSet() DeltaSet_Future {
	return DeltaSet_Future{Future: p.Future.Field(0, nil)}
}

const schema_e8f7a6b5c4d3e2f1 = "x\xda|\x94Ah\xe4T\x18\xc7\xff\xff\xf7f\x9c\xb6" +
	"t\xec\xc4\x89\x17\xa1\x0c\xa8\x88\x82Zk\x05a.#" +
	"\xb6\x85\"\xd6\xf6\xb5E\x04=\x18'\xaf6\x90IB" +
	"\x92\xa9\xedHi\x0b\xbd(\x82\xe0YAD\xc5\x9e\xaa" +
	"B/\x8a\xe0A=x\x12\x04\x85\xde\x14\xc4e\xd9\x1e" +
	"ZX\x96eY\xb2\xbctg&\x14vo\xe1\xe3\xff" +
	"\xbe\xef\xf7\xfd\xff\x1fy\xae\xc7\x97J\xd3\xd5\x86\x84P" +
	"\x8f\x97\x1f\xc8\xd2_\x93/8\xf9\xe3\x0f\xb0lfg" +
	"\xff\xfe\xf9\xcb\xf1\xd77\xae\xa0,*@\xbd\xcb\xf3\xfa" +
	">\xcd\xd7\x0e\xdf\x03\xb3[\x1f\xff\xf5\xcfo\xe7\xdf\xff" +
	"\x0eeS\x14\xc4F2s\xca\x87X\xbf\x9d\xabo\xf2" +
	"\x7f0\xfb\xe4\xfd\x17\xff\x9e:\xfa\xf9\x04\x96]\x10\x83" +
	"3\xff\x89GX\xbf\x9eO8\x13K`6\xfa\xc4\xa1" +
	"?\xfbX\xf7\x9a\xe9\xcb\xcb}\xcbR\xb0nI\xa3\xae" +
	"\xca#0\xfb\xa9\xf1\xd6\x1fgo\x9e\x9c\x1a\xb5\xbc\xa4" +
	"\xae\x1f\xca\xab\xf5c#\x9e\xf9N6\x88g\xb2\xa4\xbd" +
	"\xa1;N2%\\\xed\xa7\xce\xb3m'\x0a\xa2\xe6\xda" +
	"v\xa4\x1bs\xa6\xb0L\xaa\x11Y\x02J\x04\xac\xa7^" +
	"\x01\xd4\x93\x92\xea\x05A\x8b\xb4i\x8a\xd3/\x03\xeai" +
	"I\xb5 \x98\xa5\xdb\x91~\xcd\xe9h\x00\x1c\x87\xe08" +
	"\xb8\x1b\xebv\x18\xbb\x09\x1f\x04\x97%Y\x1b\xee\x03\x9a" +
	"\xe2\x80A\x16\x19\xf2\xf1\x8b:u\\'e\xceQ\x1b" +
	"p8\x86\xe3mI\xe5\x0b\xf61\xbc\x0f\x01\xe5K\xaa" +
	"-AK\xd0\xa6\x00\xacn\x0fP\xa9\xa4\xda\x13\xb4\xa4" +
	"\xb0)\x01k\xc7(\xf7$\xd5G\x82Y>rU\xa7" +
	"\x06\xb86\xf4\x0ed\x0d\xcc\xdaa'\x8au\x92\xd0\x0b" +
	"\x83\x15'\xf5B\x80c\x10\x1c3\xd4:\xf6\x1c\xdf\xeb" +
	"\xa1\xa5\xddU\xaf\xa79\x02\xc1\x11\xf3h\xc3\x09\xde\xd5" +
	"\xf3\xeb\\\xf7\xda\x9e\x0e\xda\xdb\xc5G\xf7\\u)\xd2" +
	"\xb1\x93z2\x0c\xcc\xae\xe39\xfe\xe4\xa3\x06\xc4z\xb8" +
	"\x09PX\xd5&Pq\\\xb7\xd5\x8d\\'\xd5-W" +
	"\xfb:\xd5\xf7i\xb9\x92\x1b\x8f\xbc\xdf\xc0\xbb\xf9\x15@" +
	"\xcdI\xaa\xe5B\x86\x8b&\xc3\x05I\xb5&Hq\xe1" +
	"\x9dz\x1eP\xafJ\xaa7\x04\xb3\xf0\x82.\x04\x03N" +
	"\x0cO\x17\xe4\x04\xb8\x1b\xc6\xae\x178~\xdf\x81\xc6\xa6" +
	"\xe3w5\xab\x10\xac\x16v\x16\x97\x01'\x8c\xf1\x86\xce" +
	"\x1e\xd0\xed\x18\x90-IuP\xa0\xdb\x7fg\x18X\x9f" +
	"\xee\x83&\xa0\x0e$\xd5\xe7&\xd9=\x9b\x92\xb4>3" +
	"\xbb}*\xa9\xbe\x11\xb4Je\x9b%\xd2\xfa\xca\xbc\xfe" +
	"RR}+\xb8\xbb\xa9\xe3\xc4\x0b\x03\x8eBp\x14\xcc" +
	"\xd6\xe3\xb0\xf3\xba\x8e\x13T\x0a\xd5V\x0eZ8\xd8\xc1" +
	"O\xe0\xee\xc1\x86Q\xeau\xbc\x9e\x06]\x12\x82\x1c\xa4" +
	">\x1b\xa2\xd2\x0d\xd2\xbe\x13w\x02\x00\x00\xff\xff\x19\xeb" +
	"\x1d\xfd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e8f7a6b5c4d3e2f1,
		Nodes: []uint64{
			0xbabb1d01a273c574,
			0xcab2f2c6e1d68ffb,
			0xdac0af2fd7377b92,
			0xec7523436ca92609,
			0xedda5bf1d05c1fbd,
		},
		Compressed: true,
	})
}
