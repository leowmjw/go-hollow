// Code generated by capnpc-go. DO NOT EDIT.

package movie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common "github.com/leowmjw/go-hollow/generated/go/common"
	math "math"
)

type Movie capnp.Struct

// Movie_TypeID is the unique identifier for the type Movie.
const Movie_TypeID = 0xc76a37747ad7df9e

func NewMovie(s *capnp.Segment) (Movie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Movie(st), err
}

func NewRootMovie(s *capnp.Segment) (Movie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Movie(st), err
}

func ReadRootMovie(msg *capnp.Message) (Movie, error) {
	root, err := msg.Root()
	return Movie(root.Struct()), err
}

func (s Movie) String() string {
	str, _ := text.Marshal(0xc76a37747ad7df9e, capnp.Struct(s))
	return str
}

func (s Movie) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Movie) DecodeFromPtr(p capnp.Ptr) Movie {
	return Movie(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Movie) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Movie) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Movie) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Movie) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Movie) Id() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Movie) SetId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Movie) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Movie) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Movie) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Movie) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Movie) Year() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Movie) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Movie) Genres() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Movie) HasGenres() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Movie) SetGenres(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewGenres sets the genres field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Movie) NewGenres(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Movie) RuntimeMin() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s Movie) SetRuntimeMin(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// Movie_List is a list of Movie.
type Movie_List = capnp.StructList[Movie]

// NewMovie creates a new list of Movie.
func NewMovie_List(s *capnp.Segment, sz int32) (Movie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Movie](l), err
}

// Movie_Future is a wrapper for a Movie promised by a client call.
type Movie_Future struct{ *capnp.Future }

func (f Movie_Future) Struct() (Movie, error) {
	p, err := f.Future.Ptr()
	return Movie(p.Struct()), err
}

type Rating capnp.Struct

// Rating_TypeID is the unique identifier for the type Rating.
const Rating_TypeID = 0xe039b2e895ab18b0

func NewRating(s *capnp.Segment) (Rating, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Rating(st), err
}

func NewRootRating(s *capnp.Segment) (Rating, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Rating(st), err
}

func ReadRootRating(msg *capnp.Message) (Rating, error) {
	root, err := msg.Root()
	return Rating(root.Struct()), err
}

func (s Rating) String() string {
	str, _ := text.Marshal(0xe039b2e895ab18b0, capnp.Struct(s))
	return str
}

func (s Rating) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Rating) DecodeFromPtr(p capnp.Ptr) Rating {
	return Rating(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Rating) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Rating) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Rating) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Rating) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Rating) MovieId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Rating) SetMovieId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Rating) UserId() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Rating) SetUserId(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Rating) Score() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Rating) SetScore(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Rating) Timestamp() (common.Timestamp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Timestamp(p.Struct()), err
}

func (s Rating) HasTimestamp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Rating) SetTimestamp(v common.Timestamp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated common.Timestamp struct, preferring placement in s's segment.
func (s Rating) NewTimestamp() (common.Timestamp, error) {
	ss, err := common.NewTimestamp(capnp.Struct(s).Segment())
	if err != nil {
		return common.Timestamp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Rating_List is a list of Rating.
type Rating_List = capnp.StructList[Rating]

// NewRating creates a new list of Rating.
func NewRating_List(s *capnp.Segment, sz int32) (Rating_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Rating](l), err
}

// Rating_Future is a wrapper for a Rating promised by a client call.
type Rating_Future struct{ *capnp.Future }

func (f Rating_Future) Struct() (Rating, error) {
	p, err := f.Future.Ptr()
	return Rating(p.Struct()), err
}
func (p Rating_Future) Timestamp() common.Timestamp_Future {
	return common.Timestamp_Future{Future: p.Future.Field(0, nil)}
}

type MovieDataset capnp.Struct

// MovieDataset_TypeID is the unique identifier for the type MovieDataset.
const MovieDataset_TypeID = 0x8ba3a15a4ab77c35

func NewMovieDataset(s *capnp.Segment) (MovieDataset, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MovieDataset(st), err
}

func NewRootMovieDataset(s *capnp.Segment) (MovieDataset, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MovieDataset(st), err
}

func ReadRootMovieDataset(msg *capnp.Message) (MovieDataset, error) {
	root, err := msg.Root()
	return MovieDataset(root.Struct()), err
}

func (s MovieDataset) String() string {
	str, _ := text.Marshal(0x8ba3a15a4ab77c35, capnp.Struct(s))
	return str
}

func (s MovieDataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MovieDataset) DecodeFromPtr(p capnp.Ptr) MovieDataset {
	return MovieDataset(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MovieDataset) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MovieDataset) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MovieDataset) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MovieDataset) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MovieDataset) Movies() (Movie_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Movie_List(p.List()), err
}

func (s MovieDataset) HasMovies() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MovieDataset) SetMovies(v Movie_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMovies sets the movies field to a newly
// allocated Movie_List, preferring placement in s's segment.
func (s MovieDataset) NewMovies(n int32) (Movie_List, error) {
	l, err := NewMovie_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Movie_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s MovieDataset) Ratings() (Rating_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Rating_List(p.List()), err
}

func (s MovieDataset) HasRatings() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MovieDataset) SetRatings(v Rating_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRatings sets the ratings field to a newly
// allocated Rating_List, preferring placement in s's segment.
func (s MovieDataset) NewRatings(n int32) (Rating_List, error) {
	l, err := NewRating_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Rating_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s MovieDataset) Version() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MovieDataset) SetVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// MovieDataset_List is a list of MovieDataset.
type MovieDataset_List = capnp.StructList[MovieDataset]

// NewMovieDataset creates a new list of MovieDataset.
func NewMovieDataset_List(s *capnp.Segment, sz int32) (MovieDataset_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[MovieDataset](l), err
}

// MovieDataset_Future is a wrapper for a MovieDataset promised by a client call.
type MovieDataset_Future struct{ *capnp.Future }

func (f MovieDataset_Future) Struct() (MovieDataset, error) {
	p, err := f.Future.Ptr()
	return MovieDataset(p.Struct()), err
}

const schema_a1b2c3d4e5f60819 = "x\xda|\x91\xbdk\x14Q\x14\xc5\xcfyw\xe2\x86\xb0" +
	"\xc6\x1dw\x0b\x0d\xc26V\x16~\x05\x11\x03\xb2\xf1\xab" +
	"H`!/\xd8\x18\x02:\xec>vGvf\x97\x99" +
	"\xd9\x90HB\x0c$`\xd0V\xab(.6\x82\x85\x92" +
	"\xc6? \x85\xff\x80`\xa9\x85\xa2\x85\xb5\x9d\x8c\xbc\xcd" +
	"~\x15j7s8\xbc\xfb\xfb\xdd{\xfe\x1ag\x9d\x0b" +
	"G\x8b\x02\xa5O\x8f\x1dI/\xad\xbf\x9f_\xea\xbcz" +
	"\x0c}\x8aLO\x8e\xff\xfa\xf6\xf1`\xbf\x831\x95\x01" +
	"\xa6\xdb\x9cg~\x97\x19 \xbf\xc3\xb7`\xfa\xe2\xf3\xa7" +
	"\x07\xc9\xe5\xfb\x1f\xfe\xda\xbe\xaa\x8e3_\xee~\xce\xa9" +
	"\"\xc1\xf4\xdd\x897O\x7f\xec_\xf9b\xebj\xa4n" +
	"_\x9c\x0ed\x8a\xf9\x0d\xb1\x8f\xaf\xc9w\xdcH\xe3J" +
	"\xdd\x04^|\xce\x09\x9a+\xbe\xb9[\xf5\x12/6\xc9" +
	"\xd9\x8a\xd7\x0a[3e\x9b\xdd<\x8c\x80\x05Rg\xc5" +
	"\x01\x1c\x02\xee\xad\x19@\xcf\x0a\xf5\xb2\xa2K\x16h\xc3" +
	";\xd7\x01}[\xa8[\x8aT\x05*\xc0\x0dlV\x17" +
	"\xeaD\xb1\xd4\x9d\x12s\x12\\\x1027t\x03m\xb8" +
	"\x19y\x89\x1f\xd6F\x0a\x03\x9b^a\xc5D\xb1\xdf\x0c" +
	"9\x0e\xc5qp\xc0/\xff\xe2\xa7\xb1\xdc\x85\x01\xf7\xc6" +
	"\x14\xa0W\x85z[\xb1\x8f\xbdu\x11\xd0\xebB\xfdH" +
	"\xd1U=\xee\x9d3\x80~(\xd4O\x14]a\x81\x02" +
	"\xb8\xbb\xd6z[\xa8_*\xba\x8e\x14\xe8\x00\xee\xf3%" +
	"@\xef\x09\xf5kE\xf1\xab}\xb6b\xe2'\x0d\xc3," +
	"\x14\xb3\xe0\xb15\xe3E\xcc@1\x03\x96j&\x8c\x86" +
	"{\xb0\x95I0\x8d\xdaa\xe2\x07\xa6\x0c\xf1\xc3~\xf5" +
	"\xff\x86\x8b^\xe2KX\xb3\x8a\xb9\x81\xa2g7\xbe," +
	"\xd4\xf5\x91\xd3\x18K~O\xa8\x1b#\x8e\xbe\x15\xaf\xf6" +
	"\xee%\x87\x8a\xc1\"\xa0\x1bB\xbd\xaa\xb8\xd9\x9d97" +
	"P*\xb5c\x13\x0d\x7f\x8bq\xa5\x19\x19N@q\x02" +
	"L-{\x9cx\x01\xd8b.\xdd\xda\xfb\xfa\xfb\xd9A" +
	"\xe7\xa7\xbd\\\x0e\xfc\x13\x00\x00\xff\xff\x1e\xd8\xb1\x1d"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a1b2c3d4e5f60819,
		Nodes: []uint64{
			0x8ba3a15a4ab77c35,
			0xc76a37747ad7df9e,
			0xe039b2e895ab18b0,
		},
		Compressed: true,
	})
}
