// Code generated by capnpc-go. DO NOT EDIT.

package iot

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Device capnp.Struct

// Device_TypeID is the unique identifier for the type Device.
const Device_TypeID = 0x817b299193a4cbe3

func NewDevice(s *capnp.Segment) (Device, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Device(st), err
}

func NewRootDevice(s *capnp.Segment) (Device, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Device(st), err
}

func ReadRootDevice(msg *capnp.Message) (Device, error) {
	root, err := msg.Root()
	return Device(root.Struct()), err
}

func (s Device) String() string {
	str, _ := text.Marshal(0x817b299193a4cbe3, capnp.Struct(s))
	return str
}

func (s Device) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Device) DecodeFromPtr(p capnp.Ptr) Device {
	return Device(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Device) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Device) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Device) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Device) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Device) Id() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Device) SetId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Device) Serial() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Device) HasSerial() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Device) SerialBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Device) SetSerial(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Device) Type() DeviceType {
	return DeviceType(capnp.Struct(s).Uint16(4))
}

func (s Device) SetType(v DeviceType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Device) Location() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Device) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Device) LocationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Device) SetLocation(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Device) Manufacturer() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Device) HasManufacturer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Device) ManufacturerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Device) SetManufacturer(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Device) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Device) HasModel() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Device) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Device) SetModel(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Device) InstalledAt() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Device) SetInstalledAt(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Device) LastSeenAt() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s Device) SetLastSeenAt(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

// Device_List is a list of Device.
type Device_List = capnp.StructList[Device]

// NewDevice creates a new list of Device.
func NewDevice_List(s *capnp.Segment, sz int32) (Device_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return capnp.StructList[Device](l), err
}

// Device_Future is a wrapper for a Device promised by a client call.
type Device_Future struct{ *capnp.Future }

func (f Device_Future) Struct() (Device, error) {
	p, err := f.Future.Ptr()
	return Device(p.Struct()), err
}

type Metric capnp.Struct

// Metric_TypeID is the unique identifier for the type Metric.
const Metric_TypeID = 0xb23868615d2649e0

func NewMetric(s *capnp.Segment) (Metric, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Metric(st), err
}

func NewRootMetric(s *capnp.Segment) (Metric, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Metric(st), err
}

func ReadRootMetric(msg *capnp.Message) (Metric, error) {
	root, err := msg.Root()
	return Metric(root.Struct()), err
}

func (s Metric) String() string {
	str, _ := text.Marshal(0xb23868615d2649e0, capnp.Struct(s))
	return str
}

func (s Metric) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metric) DecodeFromPtr(p capnp.Ptr) Metric {
	return Metric(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metric) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metric) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metric) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metric) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metric) DeviceId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Metric) SetDeviceId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Metric) Type() MetricType {
	return MetricType(capnp.Struct(s).Uint16(4))
}

func (s Metric) SetType(v MetricType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Metric) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Metric) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Metric) Timestamp() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s Metric) SetTimestamp(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s Metric) Quality() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s Metric) SetQuality(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

func (s Metric) Unit() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metric) HasUnit() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metric) UnitBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metric) SetUnit(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Metric_List is a list of Metric.
type Metric_List = capnp.StructList[Metric]

// NewMetric creates a new list of Metric.
func NewMetric_List(s *capnp.Segment, sz int32) (Metric_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Metric](l), err
}

// Metric_Future is a wrapper for a Metric promised by a client call.
type Metric_Future struct{ *capnp.Future }

func (f Metric_Future) Struct() (Metric, error) {
	p, err := f.Future.Ptr()
	return Metric(p.Struct()), err
}

type DeviceType uint16

// DeviceType_TypeID is the unique identifier for the type DeviceType.
const DeviceType_TypeID = 0x9dc092ecda8250fc

// Values of DeviceType.
const (
	DeviceType_sensor     DeviceType = 0
	DeviceType_actuator   DeviceType = 1
	DeviceType_gateway    DeviceType = 2
	DeviceType_controller DeviceType = 3
	DeviceType_display    DeviceType = 4
)

// String returns the enum's constant name.
func (c DeviceType) String() string {
	switch c {
	case DeviceType_sensor:
		return "sensor"
	case DeviceType_actuator:
		return "actuator"
	case DeviceType_gateway:
		return "gateway"
	case DeviceType_controller:
		return "controller"
	case DeviceType_display:
		return "display"

	default:
		return ""
	}
}

// DeviceTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func DeviceTypeFromString(c string) DeviceType {
	switch c {
	case "sensor":
		return DeviceType_sensor
	case "actuator":
		return DeviceType_actuator
	case "gateway":
		return DeviceType_gateway
	case "controller":
		return DeviceType_controller
	case "display":
		return DeviceType_display

	default:
		return 0
	}
}

type DeviceType_List = capnp.EnumList[DeviceType]

func NewDeviceType_List(s *capnp.Segment, sz int32) (DeviceType_List, error) {
	return capnp.NewEnumList[DeviceType](s, sz)
}

type MetricType uint16

// MetricType_TypeID is the unique identifier for the type MetricType.
const MetricType_TypeID = 0xc3825bba5637ad83

// Values of MetricType.
const (
	MetricType_temperature MetricType = 0
	MetricType_humidity    MetricType = 1
	MetricType_pressure    MetricType = 2
	MetricType_voltage     MetricType = 3
	MetricType_current     MetricType = 4
	MetricType_power       MetricType = 5
	MetricType_vibration   MetricType = 6
	MetricType_motion      MetricType = 7
	MetricType_light       MetricType = 8
	MetricType_sound       MetricType = 9
)

// String returns the enum's constant name.
func (c MetricType) String() string {
	switch c {
	case MetricType_temperature:
		return "temperature"
	case MetricType_humidity:
		return "humidity"
	case MetricType_pressure:
		return "pressure"
	case MetricType_voltage:
		return "voltage"
	case MetricType_current:
		return "current"
	case MetricType_power:
		return "power"
	case MetricType_vibration:
		return "vibration"
	case MetricType_motion:
		return "motion"
	case MetricType_light:
		return "light"
	case MetricType_sound:
		return "sound"

	default:
		return ""
	}
}

// MetricTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MetricTypeFromString(c string) MetricType {
	switch c {
	case "temperature":
		return MetricType_temperature
	case "humidity":
		return MetricType_humidity
	case "pressure":
		return MetricType_pressure
	case "voltage":
		return MetricType_voltage
	case "current":
		return MetricType_current
	case "power":
		return MetricType_power
	case "vibration":
		return MetricType_vibration
	case "motion":
		return MetricType_motion
	case "light":
		return MetricType_light
	case "sound":
		return MetricType_sound

	default:
		return 0
	}
}

type MetricType_List = capnp.EnumList[MetricType]

func NewMetricType_List(s *capnp.Segment, sz int32) (MetricType_List, error) {
	return capnp.NewEnumList[MetricType](s, sz)
}

type Alert capnp.Struct

// Alert_TypeID is the unique identifier for the type Alert.
const Alert_TypeID = 0xeeb90f28894af02a

func NewAlert(s *capnp.Segment) (Alert, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Alert(st), err
}

func NewRootAlert(s *capnp.Segment) (Alert, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Alert(st), err
}

func ReadRootAlert(msg *capnp.Message) (Alert, error) {
	root, err := msg.Root()
	return Alert(root.Struct()), err
}

func (s Alert) String() string {
	str, _ := text.Marshal(0xeeb90f28894af02a, capnp.Struct(s))
	return str
}

func (s Alert) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Alert) DecodeFromPtr(p capnp.Ptr) Alert {
	return Alert(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Alert) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Alert) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Alert) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Alert) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Alert) Id() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Alert) SetId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Alert) DeviceId() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Alert) SetDeviceId(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Alert) MetricType() MetricType {
	return MetricType(capnp.Struct(s).Uint16(8))
}

func (s Alert) SetMetricType(v MetricType) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s Alert) Severity() AlertSeverity {
	return AlertSeverity(capnp.Struct(s).Uint16(10))
}

func (s Alert) SetSeverity(v AlertSeverity) {
	capnp.Struct(s).SetUint16(10, uint16(v))
}

func (s Alert) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Alert) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Alert) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Alert) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Alert) TriggeredAt() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s Alert) SetTriggeredAt(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s Alert) ResolvedAt() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s Alert) SetResolvedAt(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

// Alert_List is a list of Alert.
type Alert_List = capnp.StructList[Alert]

// NewAlert creates a new list of Alert.
func NewAlert_List(s *capnp.Segment, sz int32) (Alert_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[Alert](l), err
}

// Alert_Future is a wrapper for a Alert promised by a client call.
type Alert_Future struct{ *capnp.Future }

func (f Alert_Future) Struct() (Alert, error) {
	p, err := f.Future.Ptr()
	return Alert(p.Struct()), err
}

type AlertSeverity uint16

// AlertSeverity_TypeID is the unique identifier for the type AlertSeverity.
const AlertSeverity_TypeID = 0xd203f31aed40f5ee

// Values of AlertSeverity.
const (
	AlertSeverity_info     AlertSeverity = 0
	AlertSeverity_warning  AlertSeverity = 1
	AlertSeverity_error    AlertSeverity = 2
	AlertSeverity_critical AlertSeverity = 3
)

// String returns the enum's constant name.
func (c AlertSeverity) String() string {
	switch c {
	case AlertSeverity_info:
		return "info"
	case AlertSeverity_warning:
		return "warning"
	case AlertSeverity_error:
		return "error"
	case AlertSeverity_critical:
		return "critical"

	default:
		return ""
	}
}

// AlertSeverityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlertSeverityFromString(c string) AlertSeverity {
	switch c {
	case "info":
		return AlertSeverity_info
	case "warning":
		return AlertSeverity_warning
	case "error":
		return AlertSeverity_error
	case "critical":
		return AlertSeverity_critical

	default:
		return 0
	}
}

type AlertSeverity_List = capnp.EnumList[AlertSeverity]

func NewAlertSeverity_List(s *capnp.Segment, sz int32) (AlertSeverity_List, error) {
	return capnp.NewEnumList[AlertSeverity](s, sz)
}

type IoTDataset capnp.Struct

// IoTDataset_TypeID is the unique identifier for the type IoTDataset.
const IoTDataset_TypeID = 0x81127f2f1fcbd939

func NewIoTDataset(s *capnp.Segment) (IoTDataset, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return IoTDataset(st), err
}

func NewRootIoTDataset(s *capnp.Segment) (IoTDataset, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return IoTDataset(st), err
}

func ReadRootIoTDataset(msg *capnp.Message) (IoTDataset, error) {
	root, err := msg.Root()
	return IoTDataset(root.Struct()), err
}

func (s IoTDataset) String() string {
	str, _ := text.Marshal(0x81127f2f1fcbd939, capnp.Struct(s))
	return str
}

func (s IoTDataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IoTDataset) DecodeFromPtr(p capnp.Ptr) IoTDataset {
	return IoTDataset(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IoTDataset) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IoTDataset) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IoTDataset) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IoTDataset) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IoTDataset) Devices() (Device_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Device_List(p.List()), err
}

func (s IoTDataset) HasDevices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IoTDataset) SetDevices(v Device_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDevices sets the devices field to a newly
// allocated Device_List, preferring placement in s's segment.
func (s IoTDataset) NewDevices(n int32) (Device_List, error) {
	l, err := NewDevice_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Device_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s IoTDataset) Metrics() (Metric_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Metric_List(p.List()), err
}

func (s IoTDataset) HasMetrics() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s IoTDataset) SetMetrics(v Metric_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMetrics sets the metrics field to a newly
// allocated Metric_List, preferring placement in s's segment.
func (s IoTDataset) NewMetrics(n int32) (Metric_List, error) {
	l, err := NewMetric_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Metric_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s IoTDataset) Alerts() (Alert_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Alert_List(p.List()), err
}

func (s IoTDataset) HasAlerts() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s IoTDataset) SetAlerts(v Alert_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAlerts sets the alerts field to a newly
// allocated Alert_List, preferring placement in s's segment.
func (s IoTDataset) NewAlerts(n int32) (Alert_List, error) {
	l, err := NewAlert_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Alert_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s IoTDataset) Version() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s IoTDataset) SetVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// IoTDataset_List is a list of IoTDataset.
type IoTDataset_List = capnp.StructList[IoTDataset]

// NewIoTDataset creates a new list of IoTDataset.
func NewIoTDataset_List(s *capnp.Segment, sz int32) (IoTDataset_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[IoTDataset](l), err
}

// IoTDataset_Future is a wrapper for a IoTDataset promised by a client call.
type IoTDataset_Future struct{ *capnp.Future }

func (f IoTDataset_Future) Struct() (IoTDataset, error) {
	p, err := f.Future.Ptr()
	return IoTDataset(p.Struct()), err
}

const schema_c3d4e5f6081a2b3c = "x\xda\x84\x95m\x88TU\x18\xc7\x9f\xff9wf\xd6" +
	"\x97\x1aO\xb3B-\xc5\xe6\x97\xd0-\xb3v\x89R\x82" +
	"u\x07\xfb\xb0\x0b\x82G\xad\xc0\x928;s\x9c\xbdq" +
	"\xe7\xde\xf1\xdc3cC\x1f\x86\xac/B\xd0\xdb\x97\x82" +
	"\x04\x03\x03\x03\x83\x8a\x04\x8d\x02\xc3\xa0D\xa5\x0c\x85\x0c" +
	"\x17\x84\x92\x0cR\x8c\xdeA\xb8q\xeeu^P\xd1O" +
	"s9\xf7\x99\xe7<\xff\xe7\xf7\x9f\xff<\xf4:[\xeb" +
	"=|\xdb\xb7\x9c\x98| \x97OV\x9f96\xba\xaa" +
	"s\xc7K$G\x80\xe4\xf1\xfbG\x86\xfe>\x7f\xea\x08" +
	"\xe5x\x81h\xe2\x04\xc6P\x9aG\x81\xa8t\x06\xbf\x10" +
	"\x92\x9f\x8e\xed}\xeb\x8d\x15/\xa6\xd5|\xa0\xdas\xd5" +
	"\xf3l!J\x17\x99{\xfc\x95}\x0dBre\xc3\xce" +
	"\x1f\x7f{\xf3\xf0n\x12#\xac_M\x98\xf8\xc2\x1bC" +
	"\xe9\x84\xfbV\xe9\xa8\xd7!$\xe7\xa6\xef\xdb\xaa\xe6\x1e" +
	"\xfb\xe4\xda\xc6\xee\xee\x89\\n!JKs\xeeQ\xe4" +
	"\x9ev\x8d_\xfe\xf0\xd1\xa7>{f\xe7\x91\xeb\x1a\xeb" +
	"\xfc\x18J\xcd\xbck\xbc=\xff\x0f!\xb9\xf4\xd7\xda\x8b" +
	"#\x7f\xf0\xef\xaf\xab\xcc\x15\xca(--\xb8JQ\xa8" +
	"\x11\x92\xb1\xcb3\xbb\x96\x17\x0f]r#x\xd7\x8e\xb0" +
	"\xba\xc0Pz\xc2UOL\x15^\x03\xadL\xe2\xca\x9c" +
	"\xae\xabx\x15\xf7#\xfb\\UY\x15k\xfb`E5" +
	"\xc2\xc6\x9a\xe9h\xf3:e\x8b\xeed\x03 \x97p\x8f" +
	"\xc8\x03\x91Pe\"\xf9,\x87|\x81A\x00\xc3p\x87" +
	"Mw\xd8\xe0\x90\xaf2\x08\xc6\x86\xc1\x88\xc4\xae5D" +
	"\xf2\x15\x0e\xb9\x87\x01|\x18\x9cH\xecv\x85os\xc8" +
	"\xbd\x0c\x9d\xaan\xf9\x15\x1d\xe3v\xc2\x06\x0e,\xe9\xa3" +
	"!\xb8\xc3N][\xe3W\x06\x0az+\xce\x0a&U" +
	"\xa0\x8d\x1dx\xdf\xd3\x7f\xb5AK\x9b\xd8\x8fB\x0c\x11" +
	"\xc3\x10\xe1f\x82\xd7\xa5\xc3\x109\xb5\xf7\xf6\xd4\x9e\x1c" +
	"!\x92\xc79\xe4\x0f\x0c]\xb1\xa7\x9d\xae\xef8\xe4\xd9" +
	"\x01\xb1g\xc6\x88\xe4)\x0ey\x8eApdj\xe7g" +
	"\x88\xe4Y\x0ey\x81Axl\x18\x1e\x918\xff<\x91" +
	"\xfc\x99C^f\x109>\x8c\x1c\x91\xb88N$/" +
	"p\xc8?\x19D\x1e\xc3\xc8\x13\x89\xdfg\x89\xe4e\x0e" +
	"y\x85A\x14\xd8\xb0\xa3(\xfe\xdbB$\xff\xe5\xd8\xe4" +
	"\x81\x81\xfb\xd5\xae\xb6\xc9X\x1b_\x05XL\x0c\x8b\x09" +
	"E\xdbnh\x14\xfb\xf6%\xa0HH\x82\xa8\xa2\xac\x1f" +
	"\x85D\xd4-M\xea*lnS\x15K\xc5\xa6\xd1\xa6" +
	"{<Z\x8f\xaa\xba\xd7/\xf1\xc3\xd8\xaa \xd0T\xa8" +
	"NY, \x86\x05\xae\x9d\x8a\xed&\xadC\xe2\x03\x87" +
	"\xb7\xdcrqs\xbb\xa1\xdd\xa2\xb3\xdd=\xb2\xc6M'" +
	"V\xce\x10\x81\x89\x15e\"p\xb1l\x0b\x11<qO" +
	"\x99h2\xd6a\x1c\x99DUlS\xd9\xc8\x10Q\xa7" +
	"\xa6\xac\xde\xa1\xdaI%\x0a\xad\x89\x82\x80\xb86\x9d\xaa" +
	"\x1f7\x02\xd5\xbe\xd9\x00\xebSKe\x98\xef\xeca~" +
	"g\xa6oK\x01\x96q~\xcf!}\x97C\xees\x9c" +
	"\x91\xcd\xfa\xbe\x03\xb5\x87C\xeew\x9cY\xc6\xf9\x83\x8d" +
	"Dr\x1f\x87\xfc\xd4q\xceg\x9c?vV\xdf\xcf!" +
	"\x0f2 \x97a>\xe0Z~\xc4!?gH2\xfb" +
	"OW\x1d\x8a\xab\x10\xbb\xd4z\xd9\x90Q\x1bm\xa9\xa0" +
	"\xa9\xb1\x88\x18\x16\x11\x12\xeb\xd7ulU\x9d\xd0\xe8\xee" +
	"\xbc\xb3\xbd\xa9\x02\xdf\xb6\x91'\x86<\xa1\xd8\x0c}\xdb" +
	"cw\xcb}\xf4\x80,OEn\x9fM\x81\xd43 " +
	"\xfeL\x0aD\x97S [\xddGN<9N\x84\xbc" +
	"X\xbf\x91\x08\x051\xed\x08\x0e\x89)w\xb8@\xac\x1e" +
	"'J\xac\xae7\xb4Q\x96\x0aM\xa3\x93\xb9f\xdd\xaf" +
	"\xfa\xb6MDI\xc3\xe88n\x1a\xed0\xb6\xa2\xc0\xaa" +
	"\x9a\xeeT\x9a\xc6\xe8\xd0\x8e6\xa2\x1d\xda$-\x7f\xd6" +
	"8\x97\x12\xc2\xc9z\xe4\xec:\x1a\xf8\xb59;\x1aG" +
	"\xcd\xb0\xda\x93\xe3]/g\xca\x05\xc2&\xdd\xd2\xc6]" +
	"\x96&W\xaah\xc5X\xaahY9Ut\xd7x\xaa" +
	"H\xcc\x10\x15\xfdp[\xd4\xd9\xa1L\xe8\x87\xb5Qm" +
	"Ld\x92\x8a\xf1\xad_Q\x81\x1b\xf6&\xabK\xefJ" +
	"\xef\xb8\xbbg\xa4\x03#}\xc0\xbdt<\xe4\xdcu\x90" +
	"C~\xe5\x8c\xe4eF\xfa\xd2\xfd\x8e\x0fs\xc8\xe3\xce" +
	"H\xb9\xccHG]\xe57\x1c\xf2\x14\x03\xbc\xccG'" +
	"\xcb\xfd\x08\x129\x96\x19\xe9\xf4\xec@\xdc\xe4y\x96\x17" +
	"\xf3[\xfaq3\x90\x0c72Z\x92E\xeb\xe66\xf1" +
	"\x1b\x19.\x89\xbb+$B\xb1\xff\x07\x94\xbd\xed\xd4u" +
	"\x1c\xab\x9a\xee\xf9\xcb\x1a\xbfV\xd3\xe6\x9al0:\x8e" +
	"\x82\x96\xae\x0ef\xc3\xff\x01\x00\x00\xff\xff\x071\xed\xf0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c3d4e5f6081a2b3c,
		Nodes: []uint64{
			0x81127f2f1fcbd939,
			0x817b299193a4cbe3,
			0x9dc092ecda8250fc,
			0xb23868615d2649e0,
			0xc3825bba5637ad83,
			0xd203f31aed40f5ee,
			0xeeb90f28894af02a,
		},
		Compressed: true,
	})
}
