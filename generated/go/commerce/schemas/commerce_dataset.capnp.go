// Code generated by capnpc-go. DO NOT EDIT.

package commerce

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Customer capnp.Struct

// Customer_TypeID is the unique identifier for the type Customer.
const Customer_TypeID = 0xccbd0c9239bfdccc

func NewCustomer(s *capnp.Segment) (Customer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Customer(st), err
}

func NewRootCustomer(s *capnp.Segment) (Customer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Customer(st), err
}

func ReadRootCustomer(msg *capnp.Message) (Customer, error) {
	root, err := msg.Root()
	return Customer(root.Struct()), err
}

func (s Customer) String() string {
	str, _ := text.Marshal(0xccbd0c9239bfdccc, capnp.Struct(s))
	return str
}

func (s Customer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Customer) DecodeFromPtr(p capnp.Ptr) Customer {
	return Customer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Customer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Customer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Customer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Customer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Customer) Id() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Customer) SetId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Customer) Email() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Customer) HasEmail() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Customer) EmailBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Customer) SetEmail(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Customer) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Customer) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Customer) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Customer) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Customer) City() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Customer) HasCity() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Customer) CityBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Customer) SetCity(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Customer) Age() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Customer) SetAge(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Customer) RegisteredAt() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Customer) SetRegisteredAt(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Customer_List is a list of Customer.
type Customer_List = capnp.StructList[Customer]

// NewCustomer creates a new list of Customer.
func NewCustomer_List(s *capnp.Segment, sz int32) (Customer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[Customer](l), err
}

// Customer_Future is a wrapper for a Customer promised by a client call.
type Customer_Future struct{ *capnp.Future }

func (f Customer_Future) Struct() (Customer, error) {
	p, err := f.Future.Ptr()
	return Customer(p.Struct()), err
}

type Order capnp.Struct

// Order_TypeID is the unique identifier for the type Order.
const Order_TypeID = 0xa1c02826cb99c8c0

func NewOrder(s *capnp.Segment) (Order, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Order(st), err
}

func NewRootOrder(s *capnp.Segment) (Order, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return Order(st), err
}

func ReadRootOrder(msg *capnp.Message) (Order, error) {
	root, err := msg.Root()
	return Order(root.Struct()), err
}

func (s Order) String() string {
	str, _ := text.Marshal(0xa1c02826cb99c8c0, capnp.Struct(s))
	return str
}

func (s Order) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Order) DecodeFromPtr(p capnp.Ptr) Order {
	return Order(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Order) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Order) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Order) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Order) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Order) Id() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Order) SetId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Order) CustomerId() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Order) SetCustomerId(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Order) Amount() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Order) SetAmount(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Order) Currency() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Order) HasCurrency() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Order) CurrencyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Order) SetCurrency(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Order) Status() OrderStatus {
	return OrderStatus(capnp.Struct(s).Uint16(16))
}

func (s Order) SetStatus(v OrderStatus) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

func (s Order) Timestamp() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s Order) SetTimestamp(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s Order) Items() (OrderItem_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return OrderItem_List(p.List()), err
}

func (s Order) HasItems() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Order) SetItems(v OrderItem_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated OrderItem_List, preferring placement in s's segment.
func (s Order) NewItems(n int32) (OrderItem_List, error) {
	l, err := NewOrderItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return OrderItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Order_List is a list of Order.
type Order_List = capnp.StructList[Order]

// NewOrder creates a new list of Order.
func NewOrder_List(s *capnp.Segment, sz int32) (Order_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[Order](l), err
}

// Order_Future is a wrapper for a Order promised by a client call.
type Order_Future struct{ *capnp.Future }

func (f Order_Future) Struct() (Order, error) {
	p, err := f.Future.Ptr()
	return Order(p.Struct()), err
}

type OrderItem capnp.Struct

// OrderItem_TypeID is the unique identifier for the type OrderItem.
const OrderItem_TypeID = 0xc293737ab5e65f60

func NewOrderItem(s *capnp.Segment) (OrderItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return OrderItem(st), err
}

func NewRootOrderItem(s *capnp.Segment) (OrderItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return OrderItem(st), err
}

func ReadRootOrderItem(msg *capnp.Message) (OrderItem, error) {
	root, err := msg.Root()
	return OrderItem(root.Struct()), err
}

func (s OrderItem) String() string {
	str, _ := text.Marshal(0xc293737ab5e65f60, capnp.Struct(s))
	return str
}

func (s OrderItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrderItem) DecodeFromPtr(p capnp.Ptr) OrderItem {
	return OrderItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrderItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrderItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrderItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrderItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrderItem) ProductId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s OrderItem) SetProductId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s OrderItem) Quantity() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s OrderItem) SetQuantity(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s OrderItem) PricePerUnit() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s OrderItem) SetPricePerUnit(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s OrderItem) ProductName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OrderItem) HasProductName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrderItem) ProductNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OrderItem) SetProductName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// OrderItem_List is a list of OrderItem.
type OrderItem_List = capnp.StructList[OrderItem]

// NewOrderItem creates a new list of OrderItem.
func NewOrderItem_List(s *capnp.Segment, sz int32) (OrderItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[OrderItem](l), err
}

// OrderItem_Future is a wrapper for a OrderItem promised by a client call.
type OrderItem_Future struct{ *capnp.Future }

func (f OrderItem_Future) Struct() (OrderItem, error) {
	p, err := f.Future.Ptr()
	return OrderItem(p.Struct()), err
}

type OrderStatus uint16

// OrderStatus_TypeID is the unique identifier for the type OrderStatus.
const OrderStatus_TypeID = 0xcf1e6df17e9e288b

// Values of OrderStatus.
const (
	OrderStatus_pending   OrderStatus = 0
	OrderStatus_confirmed OrderStatus = 1
	OrderStatus_shipped   OrderStatus = 2
	OrderStatus_delivered OrderStatus = 3
	OrderStatus_cancelled OrderStatus = 4
	OrderStatus_refunded  OrderStatus = 5
)

// String returns the enum's constant name.
func (c OrderStatus) String() string {
	switch c {
	case OrderStatus_pending:
		return "pending"
	case OrderStatus_confirmed:
		return "confirmed"
	case OrderStatus_shipped:
		return "shipped"
	case OrderStatus_delivered:
		return "delivered"
	case OrderStatus_cancelled:
		return "cancelled"
	case OrderStatus_refunded:
		return "refunded"

	default:
		return ""
	}
}

// OrderStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func OrderStatusFromString(c string) OrderStatus {
	switch c {
	case "pending":
		return OrderStatus_pending
	case "confirmed":
		return OrderStatus_confirmed
	case "shipped":
		return OrderStatus_shipped
	case "delivered":
		return OrderStatus_delivered
	case "cancelled":
		return OrderStatus_cancelled
	case "refunded":
		return OrderStatus_refunded

	default:
		return 0
	}
}

type OrderStatus_List = capnp.EnumList[OrderStatus]

func NewOrderStatus_List(s *capnp.Segment, sz int32) (OrderStatus_List, error) {
	return capnp.NewEnumList[OrderStatus](s, sz)
}

type CommerceDataset capnp.Struct

// CommerceDataset_TypeID is the unique identifier for the type CommerceDataset.
const CommerceDataset_TypeID = 0x959d9aab8f4672ab

func NewCommerceDataset(s *capnp.Segment) (CommerceDataset, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CommerceDataset(st), err
}

func NewRootCommerceDataset(s *capnp.Segment) (CommerceDataset, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CommerceDataset(st), err
}

func ReadRootCommerceDataset(msg *capnp.Message) (CommerceDataset, error) {
	root, err := msg.Root()
	return CommerceDataset(root.Struct()), err
}

func (s CommerceDataset) String() string {
	str, _ := text.Marshal(0x959d9aab8f4672ab, capnp.Struct(s))
	return str
}

func (s CommerceDataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CommerceDataset) DecodeFromPtr(p capnp.Ptr) CommerceDataset {
	return CommerceDataset(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CommerceDataset) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CommerceDataset) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CommerceDataset) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CommerceDataset) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CommerceDataset) Customers() (Customer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Customer_List(p.List()), err
}

func (s CommerceDataset) HasCustomers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CommerceDataset) SetCustomers(v Customer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCustomers sets the customers field to a newly
// allocated Customer_List, preferring placement in s's segment.
func (s CommerceDataset) NewCustomers(n int32) (Customer_List, error) {
	l, err := NewCustomer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Customer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CommerceDataset) Orders() (Order_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Order_List(p.List()), err
}

func (s CommerceDataset) HasOrders() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CommerceDataset) SetOrders(v Order_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOrders sets the orders field to a newly
// allocated Order_List, preferring placement in s's segment.
func (s CommerceDataset) NewOrders(n int32) (Order_List, error) {
	l, err := NewOrder_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Order_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CommerceDataset) Version() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CommerceDataset) SetVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// CommerceDataset_List is a list of CommerceDataset.
type CommerceDataset_List = capnp.StructList[CommerceDataset]

// NewCommerceDataset creates a new list of CommerceDataset.
func NewCommerceDataset_List(s *capnp.Segment, sz int32) (CommerceDataset_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CommerceDataset](l), err
}

// CommerceDataset_Future is a wrapper for a CommerceDataset promised by a client call.
type CommerceDataset_Future struct{ *capnp.Future }

func (f CommerceDataset_Future) Struct() (CommerceDataset, error) {
	p, err := f.Future.Ptr()
	return CommerceDataset(p.Struct()), err
}

const schema_b2c3d4e5f6081a2b = "x\xda\x8c\x92O\x88\x1cE\x18\xc5\xdf\xab\xea\x99\xd9\xc0" +
	"\xea\xa4\x999H\x10\x17D%F\xe2\xbf\xc5CrY" +
	"w\x8d\xc2.h\xf6\x8b\x04% \xd9\xb6\xbb\xb2\xdb2" +
	"\xdd\xd3\xdb]\x13\xb2A\xdc\x8b\x1e\xc4C\xc0?h\xc4" +
	"H\x02\x11\x94D\x0cB B\xc4\xa8\x11\x16\x8c\x18a" +
	"/B\xae\xd1\x8b\x07s\xd0kK\xcddz\xc6\x80\xc4" +
	"Sw\xbd~\xfd\xf1\xbd_\xbdG\xff\xe0\x93\xdecw" +
	"Li(\xb9\xafV/\xcf\xe4\xcf\x1c;\xf3\xe1\x89\xf7" +
	" Sd\xf9\xd0\xb6\x89\xbf\xafo~\xff%j\xaa\x01" +
	"L\xf7x\x94\xad7\xd9\x00Zo\xf0\x0b\xb0\xbc\xb4q" +
	"\xfc\xc7\x07\xb6_:\xe5\xdc\xde\xad\xeeY\xb5\x83-\xe9" +
	"\xbf>\xab\x8e\x11,\x97\x0e\xfev\xfeh\xf1\xcew\xce" +
	"\xae\xc6\xecn\xe2\xf4\x0d\xbd\xc0V\xcds\xc3\xe9\xfd\x0e" +
	"\x96W\xae}\xb3\xeb\xed\xc9\xaf\xaf\xdc\xea\xd6\xce}\xdd" +
	"\x9bc\xeb/\xaf\xff\xa3\xf7\x82\x1b\xfe\xd6\xf6\x8f_\xbb" +
	"\x91\xdc\xf33\xfc\xa9178=[?\xc0\xd6\xfe\xba" +
	"\x1b,\xf5\xf7\xb1\xb3,\xc2\x15\x93\x04\xc5#^\xd8M" +
	"\x12\x93\x87\xe6`\x14\xd8\xa00\xf6\xe10\xc8\xd2l\xf7" +
	"S7\xe5=3\x03y\x91\x94I\xed\x01\x1e\x01\xff\xe9" +
	"}\x80\xec\xd1\x94%E\x9fl\xd3\x89/\xed\x06\xe4E" +
	"M\xb1\x8aTm*\xc0_\x9d\x03\xa4\xa3)G\x14\xcb" +
	"\xb0W\xd8nbr\xb0\xe0\x9d\xe0\xa2&\xb7\x8e\x12\x82" +
	"N\x9c\xe9\xe6\x91\xc9\xc7\xbeWx\x07\xdf\xd7\x0f\x9b\xbc" +
	"\x88\xbb)'\xa08\x01VA\xf4\x7f\x04\xd9\xdbt\x03" +
	"\xdd\xfawW\xeb\x9f\xdf\x06\xc89M\xb98\xb6\xfeW" +
	"\x07\x00\xb9\xa0)\x97\x15}\xc5\xc1\xfe\xdf\xbaL\x175" +
	"eC\x91\xbaM\x0d\xf8?,\x00rYS\xae*\xfa" +
	"\xdeD\x9b\x1e\xe0\xff\xe4\x8c\x1b\x9a\xb2\xa9\xe8\xd7t\x9b" +
	"5\xc0\xff\xc5a\xba\xaa)\xd7\x14\xfd:\xdb\xac\x03\xfe" +
	"\xaf\x8f\x03\xb2\xa9)\x7f*\xea8\xaa\x82Tt\xf4|" +
	"%\xce\x04I\xb7\x97Zn\x81\xe2\x96\xbe'\xcfM\x1a" +
	"\xae\x01\xe0$\x14'\xc1\x99\xc2\x06\xb6W\xb09\xba|" +
	"\x90M\xb0\xb4qb\x0a\x1b$`6\x1c0\x15[\x93" +
	"\x8c\xc1\xad\xca8\x80{\xdbV\xecu,\xe7\xadI\x00" +
	"GtkE4pI\x974\xa53F4v\xa0V" +
	"\x06\x85\xa8\x88\xae\xbe\x02H\xa6)\xaf\x8e\x88\xae\xbd\x0c" +
	"\xc8\x11My]\xb1\xcc\xf2n\xd4\x0b\xed<8b\xb3" +
	"\xda\x0bR\x1b\xdb~\xee\xa1\x96\xe5qh\x16M\x8e\xe6" +
	"\xfe4\x1e!\xba\xf9\xfbsh\x04\x89\x19B\xba}\xdd" +
	"\x87\xf0]\xac\xbb\xaaX\xc7]Q\xde\xd5\x94\x93\x8a\xc3" +
	"T'\xdc\xfd}\xa0)\xa7\xc7R\x9d\xda\x01\xc8G\x9a" +
	"\xf2\xa9\xa2\xaf\xd5 \xd6'N<\xa9)g]Q\xd4" +
	"\xa0(\x9f\xdd\x0b\xc8iM9\xe7\x8a\xc2AQ>w" +
	"P\xcej\xca\x85\x7fub\xca$A\xdc\x19\x86h\xa6" +
	"c\x89\x9aal\xd7\x86\x87F\xb0l\xd8\x80b\x03," +
	"s\xb3\x1c\x17\xd6q1\xd1\xec\x88\xcb\xff\xba\xda\xe7m" +
	"`u\xaf\xe8C\xe8\xe7\x9a\x9ds\xd5\xf0w\xed\x03\xa8" +
	"\xfc'\xdcI\xfb;\xdd\xc9\xf3\x1ft\x8f\x9a\x7f\xff\x02" +
	"\xb0\x9e\x994\x8a\xd3\xe52\xec\xa6\x87\xe2<1`\xb4" +
	"^\xac\xc4Yf\xa222\x9d\xf8\xb0\xc9\x9dV\x86A" +
	"\x1a\x9aN\xa7\xff\x9e\x9bC\xbd42\x11\x80\x7f\x02\x00" +
	"\x00\xff\xff\xf4\xfdW\xa8"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b2c3d4e5f6081a2b,
		Nodes: []uint64{
			0x959d9aab8f4672ab,
			0xa1c02826cb99c8c0,
			0xc293737ab5e65f60,
			0xccbd0c9239bfdccc,
			0xcf1e6df17e9e288b,
		},
		Compressed: true,
	})
}
